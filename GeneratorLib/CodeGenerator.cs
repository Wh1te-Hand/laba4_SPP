using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace GeneratorLib
{
    public class CodeGenerator
    {
        public static List<FileInfo> Generate(List<NamespaceData> nsInfo, List<UsingDirectiveSyntax> usings)
        {
            var result = new List<FileInfo>();

            var generatedUsingsDeclaration = GenerateUsingsDeclaration(nsInfo, usings);
            foreach (var ns in nsInfo)
            {
                var generatedNsDeclaration = GenerateNsDeclaration(ns);
                foreach (var innerClass in ns.Classes)
                {
                    var generatedClassDeclaration = GenerateClassDeclaration(innerClass);
                    string fileName = ns.Name + "_" + innerClass.Name + ".cs";
                    string fileContent = generatedUsingsDeclaration.NormalizeWhitespace().ToFullString()
                        + "\r\n"
                        + generatedNsDeclaration.WithMembers(generatedClassDeclaration).NormalizeWhitespace().ToFullString();
                    result.Add(new FileInfo(fileName, fileContent));
                }
            }
            return result;
        }
        private static CompilationUnitSyntax GenerateUsingsDeclaration(List<NamespaceData> nsInfo, List<UsingDirectiveSyntax> usings)
        {
            return SyntaxFactory.CompilationUnit().WithUsings(GetUsings(nsInfo, usings));
        }

        private static NamespaceDeclarationSyntax GenerateNsDeclaration(NamespaceData ns)
        {
            return SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName(ns.Name));
        }

        private static SyntaxList<MemberDeclarationSyntax> GenerateClassDeclaration(ClassData classData)
        {
            var result = new SyntaxList<MemberDeclarationSyntax>();
            result = result.Add(SyntaxFactory.ClassDeclaration(classData.Name + "_tests")
                .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                        .WithAttributeLists(
                            SyntaxFactory.SingletonList(
                                SyntaxFactory.AttributeList(
                                    SyntaxFactory.SingletonSeparatedList(
                                        SyntaxFactory.Attribute(
                                            SyntaxFactory.IdentifierName(
                                                "TestClass"))))))
                        .WithMembers(GetTestMethods(classData)));
            return result;
        }

        private static SyntaxList<UsingDirectiveSyntax> GetUsings(List<NamespaceData> namespaces, List<UsingDirectiveSyntax> classUsings)
        {
            classUsings.Add(
                SyntaxFactory.UsingDirective(
                    SyntaxFactory.QualifiedName(
                        SyntaxFactory.IdentifierName("Microsoft.VisualStudio.TestTools"),
                        SyntaxFactory.IdentifierName("UnitTesting"))));

            foreach (var namespaceInfo in namespaces)
            {
                classUsings.Add(
                    SyntaxFactory.UsingDirective(
                        SyntaxFactory.IdentifierName(namespaceInfo.Name)));
            }

            return new SyntaxList<UsingDirectiveSyntax>().AddRange(classUsings);
        }

        private static SyntaxList<MemberDeclarationSyntax> GetTestMethods(ClassData innerClass)
        {
            var testMethods = new List<MemberDeclarationSyntax>();

            foreach (var method in innerClass.Methods)
            {
                testMethods.Add(SyntaxFactory.MethodDeclaration(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.VoidKeyword)
                        ),
                    SyntaxFactory.Identifier(
                        method.Name + "_test"
                        )
                    )
                .WithAttributeLists(
                    SyntaxFactory.SingletonList(
                        SyntaxFactory.AttributeList(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.Attribute(
                                    SyntaxFactory.IdentifierName(
                                        "TestMethod"))))))
                .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithBody(SyntaxFactory.Block(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");"))));
            }

            return new SyntaxList<MemberDeclarationSyntax>().AddRange(testMethods);
        }
    }
}
